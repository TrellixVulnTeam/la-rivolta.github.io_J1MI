{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports['default'] = createStore;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _utilsIsPlainObject = require('./utils/isPlainObject');\n\nvar _utilsIsPlainObject2 = _interopRequireDefault(_utilsIsPlainObject);\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\n\n\nvar ActionTypes = {\n  INIT: '@@redux/INIT'\n};\nexports.ActionTypes = ActionTypes;\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [initialState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, initialState) {\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = initialState;\n  var listeners = [];\n  var isDispatching = false;\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n  function getState() {\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    listeners.push(listener);\n    return function unsubscribe() {\n      var index = listeners.indexOf(listener);\n      listeners.splice(index, 1);\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!_utilsIsPlainObject2['default'](action)) {\n      throw new Error('Actions must be plain objects. Use custom middleware for async actions.');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    listeners.slice().forEach(function (listener) {\n      return listener();\n    });\n    return action;\n  }\n  /**\n   * Returns the reducer currently used by the store to calculate the state.\n   *\n   * It is likely that you will only need this function if you implement a hot\n   * reloading mechanism for Redux.\n   *\n   * @returns {Function} The reducer used by the current store.\n   */\n\n\n  function getReducer() {\n    return currentReducer;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    currentReducer = nextReducer;\n    dispatch({\n      type: ActionTypes.INIT\n    });\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    getReducer: getReducer,\n    replaceReducer: replaceReducer\n  };\n}","map":{"version":3,"sources":["/home/nbilai/Документы/react 2022/catalog/node_modules/redux/lib/createStore.js"],"names":["exports","__esModule","createStore","_interopRequireDefault","obj","_utilsIsPlainObject","require","_utilsIsPlainObject2","ActionTypes","INIT","reducer","initialState","Error","currentReducer","currentState","listeners","isDispatching","getState","subscribe","listener","push","unsubscribe","index","indexOf","splice","dispatch","action","slice","forEach","getReducer","replaceReducer","nextReducer","type"],"mappings":"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","sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports['default'] = createStore;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _utilsIsPlainObject = require('./utils/isPlainObject');\n\nvar _utilsIsPlainObject2 = _interopRequireDefault(_utilsIsPlainObject);\n\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\nvar ActionTypes = {\n  INIT: '@@redux/INIT'\n};\n\nexports.ActionTypes = ActionTypes;\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [initialState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\nfunction createStore(reducer, initialState) {\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = initialState;\n  var listeners = [];\n  var isDispatching = false;\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n  function getState() {\n    return currentState;\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n  function subscribe(listener) {\n    listeners.push(listener);\n\n    return function unsubscribe() {\n      var index = listeners.indexOf(listener);\n      listeners.splice(index, 1);\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action) {\n    if (!_utilsIsPlainObject2['default'](action)) {\n      throw new Error('Actions must be plain objects. Use custom middleware for async actions.');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    listeners.slice().forEach(function (listener) {\n      return listener();\n    });\n    return action;\n  }\n\n  /**\n   * Returns the reducer currently used by the store to calculate the state.\n   *\n   * It is likely that you will only need this function if you implement a hot\n   * reloading mechanism for Redux.\n   *\n   * @returns {Function} The reducer used by the current store.\n   */\n  function getReducer() {\n    return currentReducer;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n  function replaceReducer(nextReducer) {\n    currentReducer = nextReducer;\n    dispatch({ type: ActionTypes.INIT });\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch({ type: ActionTypes.INIT });\n\n  return {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    getReducer: getReducer,\n    replaceReducer: replaceReducer\n  };\n}"]},"metadata":{},"sourceType":"script"}